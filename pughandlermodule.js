// Generated by CoffeeScript 2.5.1
(function() {
  var camelcase, foundIds, foundIncludePaths, fs, furtherFilePaths, isComment, isInclude, log, olog, ostr, path, print, processFile, processedFiles, pughandlermodule, rememberFile, rememberId, scanLine;

  pughandlermodule = {
    name: "pughandlermodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["pughandlermodule"] != null) {
      console.log("[pughandlermodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  //region modules
  fs = require("fs");

  camelcase = require("camelcase");

  //###########################################################
  path = null;

  //endregion

  //###########################################################
  //region internalProperties
  foundIds = [];

  foundIncludePaths = [];

  furtherFilePaths = [];

  processedFiles = [];

  //endregion

  //###########################################################
  pughandlermodule.initialize = function() {
    log("pughandlermodule.initialize");
    path = allModules.pathhandlermodule;
  };

  //###########################################################
  //region internalFunctions
  processFile = function(filePath) {
    var base, includePath, j, k, len, len1, line, lines, pugString;
    log("processFile");
    log(filePath);
    foundIncludePaths.length = 0;
    pugString = String(fs.readFileSync(filePath));
    lines = pugString.split(/\r\n|\r|\n/);
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      line += " ";
      scanLine(line);
    }
    
    // log "after scanning... found stuff:"
    // olog foundIncludePaths
    // olog foundIds
    base = path.dirname(filePath);
    for (k = 0, len1 = foundIncludePaths.length; k < len1; k++) {
      includePath = foundIncludePaths[k];
      furtherFilePaths.push(path.resolve(base, includePath));
    }
    log("foundIncludePaths");
    olog(foundIncludePaths);
    processedFiles.push(filePath);
  };

  scanLine = function(line) {
    var braceIndex, commentIndex, idHashIndex, includeIndex;
    log("scanLine");
    commentIndex = line.indexOf("//-");
    includeIndex = line.indexOf("include ");
    idHashIndex = line.indexOf("#");
    braceIndex = line.indexOf("(");
    if (commentIndex >= 0) {
      if (isComment(commentIndex, includeIndex, idHashIndex)) {
        return;
      }
    }
    if (includeIndex >= 0) {
      if (isInclude(commentIndex, includeIndex, idHashIndex)) {
        rememberFile(line);
        return;
      }
    }
    if (idHashIndex >= 0) {
      if (braceIndex !== -1 && braceIndex < idHashIndex) {
        return;
      }
      rememberId(line, idHashIndex);
    }
  };

  //###########################################################
  isComment = function(commentIndex, includeIndex, idHashIndex) {
    log("isComment");
    if (includeIndex === -1) {
      includeIndex = commentIndex + 1;
    }
    if (idHashIndex === -1) {
      idHashIndex = commentIndex + 1;
    }
    if (commentIndex < includeIndex && commentIndex < idHashIndex) {
      return true;
    }
    return false;
  };

  isInclude = function(commentIndex, includeIndex, idHashIndex) {
    log("isInclude");
    if (commentIndex === -1) {
      commentIndex = includeIndex + 1;
    }
    if (idHashIndex === -1) {
      idHashIndex = includeIndex + 1;
    }
    if (includeIndex < commentIndex && includeIndex < idHashIndex) {
      return true;
    }
    return false;
  };

  //###########################################################
  rememberFile = function(line) {
    var i, j, len, token, tokens;
    log("rememberFile");
    tokens = line.split(" ");
    for (i = j = 0, len = tokens.length; j < len; i = ++j) {
      token = tokens[i];
      if (token === "include") {
        if (tokens[i + 1].lastIndexOf(".pug") === (tokens[i + 1].length - 4)) {
          foundIncludePaths.push(tokens[i + 1]);
          return;
        }
      }
    }
  };

  rememberId = function(line, idHashIndex) {
    var bestGuessEnd, braceIndex, dotIndex, id, spaceIndex;
    log("rememberId");
    bestGuessEnd = line.length - 1;
    dotIndex = line.indexOf(".", idHashIndex);
    if (dotIndex === -1) {
      dotIndex = line.length - 1;
    }
    braceIndex = line.indexOf("(", idHashIndex);
    if (braceIndex === -1) {
      braceIndex = line.length - 1;
    }
    spaceIndex = line.indexOf(" ", idHashIndex);
    if (spaceIndex === -1) {
      spaceIndex = line.length - 1;
    }
    if (dotIndex < bestGuessEnd) {
      bestGuessEnd = dotIndex;
    }
    if (braceIndex < bestGuessEnd) {
      bestGuessEnd = braceIndex;
    }
    if (spaceIndex < bestGuessEnd) {
      bestGuessEnd = braceIndex;
    }
    id = line.slice(idHashIndex, bestGuessEnd);
    if (!foundIds.includes("")) {
      foundIds.push(id);
    }
  };

  //endregion

  //###########################################################
  pughandlermodule.readFiles = function() {
    var otherPath;
    log("pughandlermodule.readFiles");
    processedFiles.length = 0;
    furtherFilePaths.length = 0;
    foundIds.length = 0;
    processFile(path.pugHeadPath);
    while (furtherFilePaths.length) {
      otherPath = furtherFilePaths.pop();
      processFile(otherPath);
    }
    log("read all files");
    olog(foundIds);
  };

  pughandlermodule.getAllIds = function() {
    var camelCased, idString, j, len, result;
    log("pughandlermodule.getAllIds");
    result = [];
    for (j = 0, len = foundIds.length; j < len; j++) {
      idString = foundIds[j];
      camelCased = camelcase(idString).replace(/#/g, "");
      if (camelCased) {
        result.push(camelCased);
      }
    }
    return result;
  };

  pughandlermodule.getProcessedFiles = function() {
    return processedFiles;
  };

  module.exports = pughandlermodule;

}).call(this);
