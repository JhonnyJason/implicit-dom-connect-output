// Generated by CoffeeScript 2.5.1
(function() {
  var camelcase, foundIds, foundIncludePaths, fs, furtherFilePaths, log, olog, onComment, onId, onInclude, ostr, path, print, processFile, pughandlermodule, search, setUpSearchTree;

  pughandlermodule = {
    name: "pughandlermodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["pughandlermodule"] != null) {
      console.log("[pughandlermodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  //region modules
  fs = require("fs");

  camelcase = require("camelcase");

  //###########################################################
  path = null;

  search = null;

  //endregion

  //###########################################################
  //region internalProperties
  foundIds = [];

  foundIncludePaths = [];

  furtherFilePaths = [];

  //endregion

  //###########################################################
  pughandlermodule.initialize = function() {
    log("pughandlermodule.initialize");
    path = allModules.pathhandlermodule;
    search = allModules.fastsearchtreemodule;
  };

  //###########################################################
  //region internal functions
  setUpSearchTree = function() {
    search.reset();
    search.addExactMatchPattern("//-", onComment);
    search.addExactMatchPattern("include ", onInclude);
    search.addTokenMatchPattern("#", " ", onId);
    search.addTokenMatchPattern("#", "(", onId);
    search.addTokenMatchPattern("#", ".", onId);
    search.addIgnoreSequence("\"", "\"");
    search.addIgnoreSequence("'", "'");
    search.addIgnoreSequence("(", ")");
  };

  //###########################################################
  //region resultFunctions
  onComment = function(result, input, lastPosition) {};

  onInclude = function(result, input, lastPosition) {
    var includePath;
    includePath = input.substr(lastPosition).replace(/\s/g, "");
    foundIncludePaths.push(includePath);
  };

  onId = function(result, input, lastPosition) {
    foundIds.push(result);
  };

  //endregion

  //###########################################################
  processFile = function(filePath) {
    var base, i, includePath, j, len, len1, line, lines, pugString;
    log("processFile");
    log(filePath);
    foundIncludePaths = [];
    pugString = String(fs.readFileSync(filePath));
    lines = pugString.split(/\r\n|\r|\n/);
    for (i = 0, len = lines.length; i < len; i++) {
      line = lines[i];
      line += " ";
      search.scan(line);
    }
    base = path.dirname(filePath);
    for (j = 0, len1 = foundIncludePaths.length; j < len1; j++) {
      includePath = foundIncludePaths[j];
      furtherFilePaths.push(path.resolve(base, includePath));
    }
  };

  
  //endregion

  //###########################################################
  pughandlermodule.readFiles = function() {
    var otherPath;
    log("pughandlermodule.readFiles");
    setUpSearchTree();
    processFile(path.pugHeadPath);
    while (furtherFilePaths.length) {
      otherPath = furtherFilePaths.pop();
      processFile(otherPath);
    }
  };

  pughandlermodule.getAllIds = function() {
    var camelCased, i, idString, len, result;
    log("pughandlermodule.getAllIds");
    result = [];
    for (i = 0, len = foundIds.length; i < len; i++) {
      idString = foundIds[i];
      camelCased = camelcase(idString).replace(/#/g, "");
      if (camelCased) {
        result.push(camelCased);
      }
    }
    return result;
  };

  module.exports = pughandlermodule;

}).call(this);
