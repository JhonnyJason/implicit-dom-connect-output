// Generated by CoffeeScript 2.5.1
(function() {
  var cliargumentsmodule, extractMeowed, getHelpText, getOptions, log, meow;

  cliargumentsmodule = {
    name: "cliargumentsmodule"
  };

  //###########################################################
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["cliargumentsmodule"] != null) {
      console.log("[cliargumentsmodule]: " + arg);
    }
  };

  //###########################################################
  meow = require("meow");

  //###########################################################
  cliargumentsmodule.initialize = function() {
    log("cliargumentsmodule.initialize");
  };

  //###########################################################
  //region internal functions
  getHelpText = function() {
    log("getHelpText");
    return `Usage
    $ implicit-dom-connect <arg1> <arg2> <arg3>
    
Options
    required: 
        arg1, --pug-head <pugHead>, -p <pugHead>
            path of where we may find the pug head for the document.
            The path may be relative or absolute.
            
        arg2, --coffee-code <coffeeCode>, -c <coffeeCode>
            single path or glob expression of where we may find the
            coffeescript files which are potentially using the
            ids of the document.
            The path may be relative or absolute.

        arg3, --output <output>, -o <output>
            path of the output file. This will be a coffee script
            module doing it's connection part on an initialize 
            function.
            The path may be relative or absolute.

    optional:
        --watch, -w
            flag that we should watch on file-change.

TO NOTE:
    The flags will overwrite the flagless argument.
     
Examples
    $ implicit-dom-connect pug-heads/document-head.pug ./*/*.coffee ./domconnect/domconnect.coffee 
    ...`;
  };

  getOptions = function() {
    log("getOptions");
    return {
      flags: {
        pugHead: {
          type: "string",
          alias: "p"
        },
        coffeeCode: {
          type: "string",
          alias: "c"
        },
        output: {
          type: "string",
          alias: "o"
        },
        watch: {
          type: "boolean",
          alias: "w"
        }
      }
    };
  };

  extractMeowed = function(meowed) {
    var coffeeCode, output, pugHead, watch;
    log("extractMeowed");
    //###########################################################
    pugHead = null;
    coffeeCode = null;
    output = null;
    watch = false;
    //###########################################################
    if (meowed.input[0]) {
      pugHead = meowed.input[0];
    }
    if (meowed.input[1]) {
      coffeeCode = meowed.input[1];
    }
    if (meowed.input[2]) {
      output = meowed.input[2];
    }
    
    //###########################################################
    if (meowed.flags.pugHead) {
      pugHead = meowed.flags.pugHead;
    }
    if (meowed.flags.coffeeCode) {
      coffeeCode = meowed.flags.coffeeCode;
    }
    if (meowed.flags.output) {
      output = meowed.flags.output;
    }
    if (meowed.flags.watch) {
      watch = meowed.flags.watch;
    }
    if (!pugHead) {
      throw "Usage failure!";
    }
    if (!coffeeCode) {
      throw "Usage failure!";
    }
    if (!output) {
      throw "Usage failure!";
    }
    return {pugHead, coffeeCode, output, watch};
  };

  //endregion

  //###########################################################
  cliargumentsmodule.extractArguments = function() {
    var extract, meowed;
    log("cliargumentsmodule.extractArguments");
    meowed = meow(getHelpText(), getOptions());
    extract = extractMeowed(meowed);
    return extract;
  };

  module.exports = cliargumentsmodule;

}).call(this);
