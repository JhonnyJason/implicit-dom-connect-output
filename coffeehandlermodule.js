// Generated by CoffeeScript 2.5.1
(function() {
  var allFiles, allIds, coffeehandlermodule, decamelize, fs, generateContentObject, log, mustache, olog, ostr, path, print, pug, usedIds, writeIfDifferent;

  coffeehandlermodule = {
    name: "coffeehandlermodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["coffeehandlermodule"] != null) {
      console.log("[coffeehandlermodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  fs = require("fs");

  mustache = require("mustache");

  decamelize = require("decamelize");

  //###########################################################
  pug = null;

  path = null;

  //###########################################################
  allIds = null;

  allFiles = null;

  usedIds = [];

  //###########################################################
  coffeehandlermodule.initialize = function() {
    log("coffeehandlermodule.initialize");
    pug = allModules.pughandlermodule;
    path = allModules.pathhandlermodule;
  };

  //###########################################################
  generateContentObject = function() {
    var content, i, id, len, moduleName, node;
    log("generateContentObject");
    moduleName = path.basename(path.outputPath, ".coffee");
    content = {moduleName};
    content.usedIds = [];
    for (i = 0, len = usedIds.length; i < len; i++) {
      id = usedIds[i];
      node = {
        variable: id,
        documentId: decamelize(id, "-")
      };
      content.usedIds.push(node);
    }
    return content;
  };

  writeIfDifferent = function(filePath, content) {
    var err, oldContent;
    log("writeIfDifferent");
    try {
      oldContent = String(fs.readFileSync(filePath));
    } catch (error) {
      err = error;
      oldContent = "";
    }
    if (oldContent !== content) {
      fs.writeFileSync(filePath, content);
    }
  };

  //###########################################################
  coffeehandlermodule.scanForUsedIds = function() {
    var coffeeString, file, i, id, j, len, len1;
    log("coffeehandlermodule.scanForUsedIds");
    allIds = pug.getAllIds();
    allFiles = path.coffeeCodeFilePaths;
    usedIds.length = 0;
    for (i = 0, len = allIds.length; i < len; i++) {
      id = allIds[i];
      for (j = 0, len1 = allFiles.length; j < len1; j++) {
        file = allFiles[j];
        coffeeString = String(fs.readFileSync(file));
        if (coffeeString.indexOf(id + ".") !== -1) {
          usedIds.push(id);
          break;
        }
      }
    }
    log("scanned usedIds");
    olog(usedIds);
  };

  coffeehandlermodule.getUsedIds = function() {
    return usedIds;
  };

  coffeehandlermodule.writeOutputFile = function() {
    var contentObject, fileContent, template;
    log("coffeehandlermodule.writeOutputFile");
    template = String(fs.readFileSync(path.templatePath));
    contentObject = generateContentObject();
    fileContent = mustache.render(template, contentObject);
    writeIfDifferent(path.outputPath, fileContent);
  };

  module.exports = coffeehandlermodule;

}).call(this);
