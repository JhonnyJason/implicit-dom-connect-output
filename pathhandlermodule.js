// Generated by CoffeeScript 2.5.1
(function() {
  var cfg, checkDirectoryExists, checkFileExists, checkSomethingExists, exec, execGitCheckPromise, fs, glob, homedir, log, olog, onFileChange, os, ostr, pathModule, pathhandlermodule, print, resolveHomeDir, watcherList;

  pathhandlermodule = {
    name: "pathhandlermodule"
  };

  //###########################################################
  //region logPrintFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["pathhandlermodule"] != null) {
      console.log("[pathhandlermodule]: " + arg);
    }
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  //region modulesFromEnvironment
  //###########################################################
  //region node_modules
  fs = require("fs-extra");

  glob = require("glob");

  pathModule = require("path");

  os = require("os");

  exec = require("child_process").exec;

  //endregion

  //###########################################################
  cfg = null;

  //endregion

  //###########################################################
  //region properties
  homedir = os.homedir();

  watcherList = [];

  //###########################################################
  //region exposedProperties
  pathhandlermodule.homedir = homedir; //directory

  pathhandlermodule.pugHeadPath = ""; //file

  pathhandlermodule.coffeeCodePathExpression = ""; //potential glob - file(s)

  pathhandlermodule.coffeeCodeFilePaths = [];

  pathhandlermodule.outputPath = ""; //file

  pathhandlermodule.templatePath = ""; //file

  //endregion
  //endregion

  //###########################################################
  pathhandlermodule.initialize = function() {
    log("pathhandlermodule.initialize");
    cfg = allModules.configmodule;
    pathhandlermodule.templatePath = pathModule.resolve(__dirname, cfg.outputTemplatePath);
  };

  //###########################################################
  //region internalFunctions
  execGitCheckPromise = function(path) {
    var options;
    options = {
      cwd: path
    };
    return new Promise(function(resolve, reject) {
      var callback;
      callback = function(error, stdout, stderr) {
        if (error) {
          reject(error);
        }
        if (stderr) {
          reject(new Error(stderr));
        }
        return resolve(stdout);
      };
      return exec("git rev-parse --is-inside-work-tree", options, callback);
    });
  };

  resolveHomeDir = function(path) {
    log("resolveHomeDir");
    if (!path) {
      return;
    }
    if (path[0] === "~") {
      path = path.replace("~", homedir);
    }
    return path;
  };

  onFileChange = function(file, callback) {
    var directCallback, watcher;
    log("onFileChange");
    directCallback = function(eventType, filename) {
      if (filename && eventType === "change") {
        log(filename);
        callback();
      }
    };
    watcher = fs.watch(file, directCallback);
    watcherList.push(watcher);
  };

  //###########################################################
  checkSomethingExists = async function(something) {
    var err;
    try {
      await fs.lstat(something);
      return true;
    } catch (error1) {
      err = error1;
      return false;
    }
  };

  checkDirectoryExists = async function(path) {
    var err, stats;
    try {
      stats = (await fs.lstat(path));
      return stats.isDirectory();
    } catch (error1) {
      err = error1;
      return false;
    }
  };

  checkFileExists = async function(path) {
    var err, stats;
    try {
      stats = (await fs.lstat(path));
      return stats.isFile();
    } catch (error1) {
      err = error1;
      return false;
    }
  };

  //endregion

  //###########################################################
  //region exposedFunctions
  pathhandlermodule.onAnyFileChanges = function(files, callback) {
    var file, i, len;
    log("pathhandlermodule.onAnyFileChanges");
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      onFileChange(file, callback);
    }
  };

  pathhandlermodule.stopWatchingFiles = function() {
    var i, len, watcher;
    log("pathhandlermodule.stopWatchingFiles");
    for (i = 0, len = watcherList.length; i < len; i++) {
      watcher = watcherList[i];
      watcher.close();
    }
    watcherList.length = 0;
  };

  //###########################################################
  //region preparationFunctions
  pathhandlermodule.preparePugHeadPath = async function(providedPath) {
    var exists;
    log("pathhandlermodule.preparePugHeadPath");
    if (!providedPath) {
      throw "preparePugHeadPath - no providedPath";
    }
    providedPath = resolveHomeDir(providedPath);
    if (pathModule.isAbsolute(providedPath)) {
      pathhandlermodule.pugHeadPath = providedPath;
    } else {
      pathhandlermodule.pugHeadPath = pathModule.resolve(process.cwd(), providedPath);
    }
    log("our pugHead is: " + pathhandlermodule.pugHeadPath);
    exists = (await checkFileExists(pathhandlermodule.pugHeadPath));
    if (!exists) {
      throw "preparePugHead - no file existed at : " + providedPath;
    }
  };

  pathhandlermodule.prepareCoffeeCodePath = function(providedPath) {
    var filePath, files, i, len;
    log("pathhandlermodule.prepareCoffeeCodePath");
    pathhandlermodule.coffeeCodeFilePaths.length = 0;
    if (!providedPath) {
      throw "prepareCoffeeCodePath - no providedPath";
    }
    pathhandlermodule.coffeeCodePathExpression = providedPath;
    providedPath = resolveHomeDir(providedPath);
    if (!pathModule.isAbsolute(providedPath)) {
      providedPath = pathModule.resolve(process.cwd(), providedPath);
    }
    files = glob.sync(providedPath);
    for (i = 0, len = files.length; i < len; i++) {
      filePath = files[i];
      pathhandlermodule.coffeeCodeFilePaths.push(filePath);
    }
  };

  pathhandlermodule.prepareOutputPath = async function(providedPath) {
    var coffeePath, exists, i, index, lastDir, len, ref;
    log("pathhandlermodule.prepareOutputPath");
    if (!providedPath) {
      throw "prepareOutputPath - no providedPath";
    }
    providedPath = resolveHomeDir(providedPath);
    if (pathModule.isAbsolute(providedPath)) {
      pathhandlermodule.outputPath = providedPath;
    } else {
      pathhandlermodule.outputPath = pathModule.resolve(process.cwd(), providedPath);
    }
    ref = pathhandlermodule.coffeeCodeFilePaths;
    // remove self from coffee paths - also if it was there then it surely existed ;-)
    for (index = i = 0, len = ref.length; i < len; index = ++i) {
      coffeePath = ref[index];
      if (coffeePath === pathhandlermodule.outputPath) {
        pathhandlermodule.coffeeCodeFilePaths.splice(index, 1);
        return;
      }
    }
    lastDir = pathModule.dirname(pathhandlermodule.outputPath);
    exists = (await checkDirectoryExists(lastDir));
    if (!exists) {
      throw "Cannot write to output file - directory does not exist!";
    }
  };

  //endregion

  //###########################################################
  //region passingOtherFunctions
  pathhandlermodule.resolve = pathModule.resolve;

  pathhandlermodule.relative = pathModule.relative;

  pathhandlermodule.dirname = pathModule.dirname;

  pathhandlermodule.basename = pathModule.basename;

  //endregion

  //endregion
  module.exports = pathhandlermodule;

}).call(this);
